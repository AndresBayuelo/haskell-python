funciones
    sumar los elementos de una lista (bayuelo)

        sumar::[Int]->Int
        sumar [ ] = 0
        sumar (x:xs) = x + sumar(xs)

        sumar [5,4,7,8]

    invertir lista (nata)

        invertir::Ord a=>[a]->[a]
        invertir [ ] = [ ]
        invertir (x:xs) = (invertir xs)++[x]

        invertir [5,4,7,8]

    comprobar listas iguales (bayuelo)

        igualLista:: Eq a => [a]->[a]->Bool

        Main> igualLista ["Hola","Mundo"] ["Mundo","Hola"]

    comprobar lista ordenada (nata)

        lista_ordenada::Ord a=>[a]->Bool
        lista_ordenada [] = True
        lista_ordenada [_] = True
        lista_ordenada (x:y:xs) = (x<=y) && lista_ordenada (y:xs)

        Main> lista_ordenada ['a','b','c','d']

    mostrar el elemento que se encuentra en cierta ubicaciÃ³n (bayuelo)

        mostrar_ubicacion::Ord a=>[a]->Int->a
        mostrar_ubicacion l n = l!!n

        Main> mostrar_ubicacion [15,25,26,28] 2

    mayor elemento lista (nata)

        mayor::[Int]->Int
        mayor (x:xs)
            | x > mayor(xs) = x
            | otherwise = mayor(xs)

        Main> mayor [78,24,56,93,21,237,46,74,125]

    contar cuantos elementos pares hay en una lista (bayuelo)

        contarpares::[Int]->Int
        contarpares []=0
        contarpares lista= length [x | x <- lista, mod x 2 ==0]

        Main> contarpares [5,4,7,8]

    devolber cuadrados de una lista (nata)

        cuadrados::[Int]->[Int]
        cuadrados [ ] = [ ]
        cuadrados l = [x*x| x <- l]

        Main> cuadrados [1..10]

    devolver una lista de numeros primos de 1 a n (bayuelo)

        divisible::Int->Int->Bool
        divisible x y = (mod x y) ==0

        divisibles::Int->[Int]
        divisibles x = [y | y <-[1..x],divisible x y]
        
        esPrimo::Int->Bool
        esPrimo n = length (divisibles n) <=2

        primos::Int->[Int]
        primos n = [x | x <-[1..n],esPrimo x]

        Main> primos 100


